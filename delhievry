// This is a minimal Vercel-ready Delhivery Warehouse project structure

/*
Project: delhivery-vercel-simple/

Structure:

delhivery-vercel-simple/
├─ api/
│  └─ warehouse.js        <- Serverless function to call Delhivery API securely
├─ src/
│  └─ App.jsx             <- React form for warehouse creation
├─ index.html             <- Root HTML
├─ package.json           <- Project dependencies
├─ tailwind.config.js     <- Tailwind CSS config
└─ vercel.json            <- Vercel deployment config
*/

/* ===================== api/warehouse.js ===================== */
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    const DELHIVERY_API_KEY = process.env.DELHIVERY_API_KEY;
    const body = req.body;

    const response = await fetch('https://staging-express.delhivery.com/api/backend/clientwarehouse/create/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${DELHIVERY_API_KEY}`,
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return res.status(response.status).json(data);
    }

    return res.status(200).json(data);
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }
}

/* ===================== src/App.jsx ===================== */
import React, { useState } from 'react';

export default function App() {
  const [form, setForm] = useState({ name: '', phone: '', pin: '', return_address: '' });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(null);
  const [error, setError] = useState(null);

  const handleChange = e => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setMessage(null);

    try {
      const res = await fetch('/api/warehouse', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form)
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || `HTTP ${res.status}`);
      setMessage('✅ Warehouse registered successfully');
      setForm({ name: '', phone: '', pin: '', return_address: '' });
    } catch (err) {
      setError(`❌ Failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Delhivery Warehouse</h1>
      <form onSubmit={handleSubmit} className="space-y-3">
        <input name="name" placeholder="Warehouse Name" value={form.name} onChange={handleChange} className="w-full p-2 border rounded"/>
        <input name="phone" placeholder="Phone" value={form.phone} onChange={handleChange} className="w-full p-2 border rounded"/>
        <input name="pin" placeholder="Pincode" value={form.pin} onChange={handleChange} className="w-full p-2 border rounded"/>
        <textarea name="return_address" placeholder="Return Address" value={form.return_address} onChange={handleChange} className="w-full p-2 border rounded"/>
        <button type="submit" className="w-full p-2 bg-blue-700 text-white rounded">{loading ? 'Saving...' : 'Save'}</button>
        {error && <div className="text-red-600">{error}</div>}
        {message && <div className="text-green-600">{message}</div>}
      </form>
    </div>
  );
}

/* ===================== index.html ===================== */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Delhivery Warehouse</title>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="src/main.jsx"></script>
</body>
</html>

/* ===================== vercel.json ===================== */
{
  "version": 2,
  "builds": [
    { "src": "api/**/*.js", "use": "@vercel/node" },
    { "src": "package.json", "use": "@vercel/static-build" }
  ],
  "routes": [
    { "src": "/api/(.*)", "dest": "/api/$1.js" }
  ]
}

/* ===================== tailwind.config.js ===================== */
module.exports = {
  content: ['./index.html', './src/**/*.{js,jsx}'],
  theme: { extend: {} },
  plugins: [],
};

/* ===================== package.json ===================== */
{
  "name": "delhivery-vercel-simple",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "vite": "^4.0.0",
    "tailwindcss": "^3.3.0",
    "postcss": "^8.4.0",
    "autoprefixer": "^10.4.0"
  }
}
