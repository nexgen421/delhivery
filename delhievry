// Vercel-ready React + serverless proxy setup for Delhivery Warehouse

/*
Project Structure:

delhivery-vercel/
├─ api/
│  └─ warehouse.js       <- Vercel serverless function to call Delhivery API securely
├─ src/
│  └─ App.jsx            <- React form (API Key input + Warehouse form)
├─ index.html
├─ package.json
├─ tailwind.config.js
└─ vercel.json           <- Vercel config
*/

/* ===================== api/warehouse.js ===================== */
// Serverless function to securely call Delhivery API
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    const body = req.body;
    const DELHIVERY_API_KEY = process.env.DELHIVERY_API_KEY;

    const response = await fetch('https://api.delhivery.com/warehouse/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${DELHIVERY_API_KEY}`,
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return res.status(response.status).json(data);
    }

    return res.status(200).json(data);
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }
}

/* ===================== src/App.jsx ===================== */
import React, { useState } from 'react';

export default function App() {
  const [form, setForm] = useState({
    name: '', registered_name: '', phone: '', email: '',
    address: '', city: '', pin: '', country: '',
    return_address: '', return_city: '', return_pin: '', return_state: '', return_country: ''
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(null);
  const [error, setError] = useState(null);

  const handleChange = e => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const validate = () => {
    if (!form.name.trim()) return 'Warehouse name is required';
    if (!form.phone.trim()) return 'Phone is required';
    if (!form.pin.trim()) return 'Pincode is required';
    if (!form.return_address.trim()) return 'Return address is required';
    return null;
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setMessage(null);
    setError(null);

    const v = validate();
    if (v) return setError(v);

    setLoading(true);
    try {
      const res = await fetch('/api/warehouse', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form)
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || `HTTP ${res.status}`);
      setMessage('✅ Warehouse registered successfully.');
      setForm({
        name: '', registered_name: '', phone: '', email: '',
        address: '', city: '', pin: '', country: '',
        return_address: '', return_city: '', return_pin: '', return_state: '', return_country: ''
      });
    } catch (err) {
      setError(`❌ Failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6 space-y-6">
      <h1 className="text-2xl font-semibold text-center">Delhivery Warehouse Registration</h1>
      <form onSubmit={handleSubmit} className="space-y-4 bg-white p-6 rounded-2xl shadow">
        <div>
          <label>Warehouse Name *</label>
          <input name="name" value={form.name} onChange={handleChange} className="mt-1 block w-full p-2 border rounded" />
        </div>
        <div>
          <label>Phone *</label>
          <input name="phone" value={form.phone} onChange={handleChange} className="mt-1 block w-full p-2 border rounded" />
        </div>
        <div>
          <label>Pincode *</label>
          <input name="pin" value={form.pin} onChange={handleChange} className="mt-1 block w-full p-2 border rounded" />
        </div>
        <div>
          <label>Return Address *</label>
          <textarea name="return_address" value={form.return_address} onChange={handleChange} className="mt-1 block w-full p-2 border rounded" />
        </div>
        <button type="submit" className="px-4 py-2 bg-slate-800 text-white rounded">
          {loading ? 'Saving...' : 'Save Warehouse'}
        </button>
        {error && <div className="text-red-600">{error}</div>}
        {message && <div className="text-green-600">{message}</div>}
      </form>
    </div>
  );
}

/* ===================== vercel.json ===================== */
{
  "version": 2,
  "builds": [
    { "src": "api/**/*.js", "use": "@vercel/node" },
    { "src": "package.json", "use": "@vercel/static-build" }
  ],
  "routes": [
    { "src": "/api/(.*)", "dest": "/api/$1.js" }
  ]
}
